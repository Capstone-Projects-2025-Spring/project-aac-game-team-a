"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3374],{84811:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"requirements/system-overview","title":"System Overview","description":"Project abstraction","source":"@site/docs/requirements/system-overview.md","sourceDirName":"requirements","slug":"/requirements/system-overview","permalink":"/project-aac-game-team-a/docs/requirements/system-overview","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Spring/project-aac-game-team-a/tree/main/documentation/docs/requirements/system-overview.md","tags":[],"version":"current","lastUpdatedBy":"Terrell Heyward","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Requirements Specification","permalink":"/project-aac-game-team-a/docs/category/requirements-specification"},"next":{"title":"System Block Diagram","permalink":"/project-aac-game-team-a/docs/requirements/system-block-diagram"}}');var r=t(74848),s=t(28453);const a={sidebar_position:1},o="System Overview",c={},l=[{value:"Project abstraction",id:"project-abstraction",level:2},{value:"Conceptual Design",id:"conceptual-design",level:2},{value:"Frontend",id:"frontend",level:3},{value:"Backend",id:"backend",level:3},{value:"Deployment",id:"deployment",level:3}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"system-overview",children:"System Overview"})}),"\n",(0,r.jsx)(n.h2,{id:"project-abstraction",children:"Project abstraction"}),"\n",(0,r.jsx)(n.p,{children:"Scribblers is a web-based, Pictionary-style game that integrates Augmentative and Alternative Communication (AAC) controls. The project uses frontend frameworks for AAC communication, drawing functionality, lobby hosting and joining, real-time event handling, and real-time communication. The backend manages external API integration, game logic, real-time user interactions, and game history and statistics."}),"\n",(0,r.jsx)(n.h2,{id:"conceptual-design",children:"Conceptual Design"}),"\n",(0,r.jsx)(n.h3,{id:"frontend",children:"Frontend"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vue.js 3"})," -  Frontend framework for building the game interface and handling client-side events."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vue Router"})," - Library for dynamic navigation between views and components."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pinia"})," - State management library for maintaining consistent state across UI components."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTML5 Canvas"})," - API for managing the drawing board and user drawing actions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Socket.io (Client-Side)"})," - Library for real-time communication between players via WebSocket."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"backend",children:"Backend"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Node.js"})," - Backend runtime environment for processing game logic, managing server-side state, and handling real-time events."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Express"})," - Web server framework for establishing API endpoints and managing HTTP requests."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Socket.io (Server-Side)"})," - Library for broadcasting real-time updates between clients through WebSocket connections."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"deployment",children:"Deployment"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fly.io"})," - Cloud deployment platform to deploy the frontend and backend"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Docker Container"})," - Package that will bundle the application's build and run environment configuration to be deployed by Fly.io"]}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);