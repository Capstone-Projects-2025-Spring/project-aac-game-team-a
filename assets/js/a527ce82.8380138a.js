"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[8170],{23614:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"api-specification/backend","title":"Backend Class Documentation","description":"Documentation for the Scribblers backend classes.","source":"@site/docs/api-specification/backend.md","sourceDirName":"api-specification","slug":"/api-specification/backend","permalink":"/project-aac-game-team-a/docs/api-specification/backend","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Spring/project-aac-game-team-a/tree/main/documentation/docs/api-specification/backend.md","tags":[],"version":"current","lastUpdatedBy":"kenfonseca","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"API Specifications through Swagger","permalink":"/project-aac-game-team-a/docs/api-specification/openapi-spec"},"next":{"title":"Backend JSDoc Documentation","permalink":"/project-aac-game-team-a/docs/api-specification/backendJSDoc"}}');var i=n(74848),l=n(28453);const t={},d="Backend Class Documentation",c={},a=[{value:"Controller Classes",id:"controller-classes",level:2},{value:"LobbyController Class",id:"lobbycontroller-class",level:3},{value:"DrawingController Class",id:"drawingcontroller-class",level:3},{value:"GuessController Class",id:"guesscontroller-class",level:3},{value:"ScoreController Class",id:"scorecontroller-class",level:3},{value:"Model Classes",id:"model-classes",level:2},{value:"Lobby",id:"lobby",level:3},{value:"Drawing",id:"drawing",level:3},{value:"Guess",id:"guess",level:3},{value:"Score",id:"score",level:3},{value:"WebSocket Events",id:"websocket-events",level:2},{value:"Game Events",id:"game-events",level:3},{value:"Migrations",id:"migrations",level:2},{value:"create_lobbies_table",id:"create_lobbies_table",level:3},{value:"create_drawings_table",id:"create_drawings_table",level:3},{value:"create_guesses_table",id:"create_guesses_table",level:3},{value:"create_scores_table",id:"create_scores_table",level:3}];function o(e){const s={h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"backend-class-documentation",children:"Backend Class Documentation"})}),"\n",(0,i.jsx)(s.p,{children:"Documentation for the Scribblers backend classes."}),"\n",(0,i.jsx)(s.h2,{id:"controller-classes",children:"Controller Classes"}),"\n",(0,i.jsx)(s.h3,{id:"lobbycontroller-class",children:"LobbyController Class"}),"\n",(0,i.jsx)(s.p,{children:"The purpose of this class is to handle lobby-related HTTP requests."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"createLobby() method"}),": Creates a new game lobby."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": POST /api/lobby/"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": Request $request"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with lobby details and HTTP status code"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"joinLobby() method"}),": Allows a player to join an existing lobby."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": POST /api/lobby/join"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": Request $request (including lobby ID and player info)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with lobby details and HTTP status code"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"getLobbyInfo() method"}),": Retrieves the current state of a lobby."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": GET /api/lobby/lobbyid"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": int $lobbyId"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with lobby state and HTTP status code"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"startGame() method"}),": Begins the game once enough players have joined."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": POST /api/lobby/lobbyid/start"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": int $lobbyId"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with game state and HTTP status code"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"drawingcontroller-class",children:"DrawingController Class"}),"\n",(0,i.jsx)(s.p,{children:"The DrawingController class manages all drawing-related operations."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"submitDrawing() method"}),": Handles the submission of a drawing."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": POST /api/drawing/submit"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": Request $request (including image data and player ID)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with HTTP status code"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"getCurrentDrawing() method"}),": Retrieves the current drawing in progress."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": GET /api/drawing/lobbyid"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": int $lobbyId"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with drawing data and HTTP status code"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"guesscontroller-class",children:"GuessController Class"}),"\n",(0,i.jsx)(s.p,{children:"The GuessController class handles user guesses for the drawing."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"submitGuess() method"}),": Submits a guess for the current drawing."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": POST /api/guess/"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": Request $request (including guess text and player ID)"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with correctness status and HTTP status code"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"getGuesses() method"}),": Retrieves all guesses for the current round."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": GET /api/guess/lobbyid"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": int $lobbyId"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with list of guesses and HTTP status code"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"scorecontroller-class",children:"ScoreController Class"}),"\n",(0,i.jsx)(s.p,{children:"Manages scoring and ranking in the game."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"calculateScores() method"}),": Computes and updates scores at the end of a round."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": POST /api/score/calculate"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": int $lobbyId"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with updated scores and HTTP status code"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"getLeaderboard() method"}),": Retrieves the leaderboard for a lobby."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pre-condition"}),": GET /api/score/leaderboard/lobbyid"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Parameters"}),": int $lobbyId"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Returns"}),": JSON response with ranking data and HTTP status code"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"model-classes",children:"Model Classes"}),"\n",(0,i.jsx)(s.h3,{id:"lobby",children:"Lobby"}),"\n",(0,i.jsx)(s.p,{children:"Represents a game lobby with relevant details."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Fields"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"lobby_id: string"}),"\n",(0,i.jsx)(s.li,{children:"players: array"}),"\n",(0,i.jsx)(s.li,{children:"game_status: string (waiting, active, completed)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"drawing",children:"Drawing"}),"\n",(0,i.jsx)(s.p,{children:"Represents a submitted drawing."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Fields"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"drawing_id: string"}),"\n",(0,i.jsx)(s.li,{children:"lobby_id: string"}),"\n",(0,i.jsx)(s.li,{children:"player_id: string"}),"\n",(0,i.jsx)(s.li,{children:"image_data: binary"}),"\n",(0,i.jsx)(s.li,{children:"created_at: timestamp"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"guess",children:"Guess"}),"\n",(0,i.jsx)(s.p,{children:"Represents a player\u2019s guess."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Fields"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"guess_id: string"}),"\n",(0,i.jsx)(s.li,{children:"lobby_id: string"}),"\n",(0,i.jsx)(s.li,{children:"player_id: string"}),"\n",(0,i.jsx)(s.li,{children:"text: string"}),"\n",(0,i.jsx)(s.li,{children:"is_correct: boolean"}),"\n",(0,i.jsx)(s.li,{children:"created_at: timestamp"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"score",children:"Score"}),"\n",(0,i.jsx)(s.p,{children:"Represents a player's score."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Fields"}),":","\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsx)(s.li,{children:"player_id: string"}),"\n",(0,i.jsx)(s.li,{children:"lobby_id: string"}),"\n",(0,i.jsx)(s.li,{children:"score: int"}),"\n",(0,i.jsx)(s.li,{children:"updated_at: timestamp"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"websocket-events",children:"WebSocket Events"}),"\n",(0,i.jsx)(s.h3,{id:"game-events",children:"Game Events"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"playerJoined"}),": Triggered when a player joins a lobby."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Payload"}),": player_id, lobby_id"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"drawingSubmitted"}),": Triggered when a player submits a drawing."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Payload"}),": drawing_id, lobby_id"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"guessMade"}),": Triggered when a player submits a guess."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Payload"}),": guess_id, lobby_id, is_correct"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"roundEnded"}),": Triggered at the end of a round."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Payload"}),": lobby_id, scores"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(s.li,{children:["\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.strong,{children:"gameStarted"}),": Triggered when the game starts."]}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Payload"}),": lobby_id, players"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(s.h2,{id:"migrations",children:"Migrations"}),"\n",(0,i.jsx)(s.h3,{id:"create_lobbies_table",children:"create_lobbies_table"}),"\n",(0,i.jsx)(s.p,{children:"Creates the lobbies table in the database."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"run() method"}),": Defines schema for storing lobby data."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"create_drawings_table",children:"create_drawings_table"}),"\n",(0,i.jsx)(s.p,{children:"Creates the drawings table in the database."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"run() method"}),": Defines schema for storing drawing data."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"create_guesses_table",children:"create_guesses_table"}),"\n",(0,i.jsx)(s.p,{children:"Creates the guesses table in the database."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"run() method"}),": Defines schema for storing guesses."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"create_scores_table",children:"create_scores_table"}),"\n",(0,i.jsx)(s.p,{children:"Creates the scores table in the database."}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"run() method"}),": Defines schema for storing player scores."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsx)(s.p,{children:"This documentation provides an overview of the backend structure for Scribblers, covering controllers, models, WebSocket events, factories, and database migrations."})]})}function h(e={}){const{wrapper:s}={...(0,l.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>t,x:()=>d});var r=n(96540);const i={},l=r.createContext(i);function t(e){const s=r.useContext(l);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),r.createElement(l.Provider,{value:s},e.children)}}}]);