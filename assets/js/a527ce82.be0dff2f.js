"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[8170],{23614:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api-specification/backend","title":"Scribblers Backend Documentation","description":"Overview","source":"@site/docs/api-specification/backend.md","sourceDirName":"api-specification","slug":"/api-specification/backend","permalink":"/project-aac-game-team-a/docs/api-specification/backend","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Spring/project-aac-game-team-a/tree/main/documentation/docs/api-specification/backend.md","tags":[],"version":"current","lastUpdatedBy":"Terrell Heyward","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"API Specifications through Swagger","permalink":"/project-aac-game-team-a/docs/api-specification/openapi-spec"},"next":{"title":"Backend JSDoc Documentation","permalink":"/project-aac-game-team-a/docs/api-specification/backendJSDoc"}}');var i=n(74848),t=n(28453);const d={},c="Scribblers Backend Documentation",l={},a=[{value:"Overview",id:"overview",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Main Files",id:"main-files",level:3},{value:"Classes",id:"classes",level:2},{value:"SocketHandler",id:"sockethandler",level:3},{value:"Methods",id:"methods",level:4},{value:"<code>createServerInstance(httpServer)</code>",id:"createserverinstancehttpserver",level:5},{value:"<code>startServer(httpServer, port)</code>",id:"startserverhttpserver-port",level:5},{value:"<code>initializeServerListeners(server, client, gameDataMap)</code>",id:"initializeserverlistenersserver-client-gamedatamap",level:5},{value:"Event Listeners",id:"event-listeners",level:4},{value:"GameData",id:"gamedata",level:3},{value:"Properties",id:"properties",level:4},{value:"Methods",id:"methods-1",level:4},{value:"<code>constructor(numberRounds, currentRound, maxPlayers, players, prompt, drawer, timerID, timerValue, playerData)</code>",id:"constructornumberrounds-currentround-maxplayers-players-prompt-drawer-timerid-timervalue-playerdata",level:5},{value:"<code>startNewRound(server, room, gameDataMap)</code>",id:"startnewroundserver-room-gamedatamap",level:5},{value:"<code>getPromptObject()</code>",id:"getpromptobject",level:5},{value:"<code>getPath(promptObject)</code>",id:"getpathpromptobject",level:5},{value:"<code>clearGuesses(server, room)</code>",id:"clearguessesserver-room",level:5},{value:"<code>allGuessesCorrect()</code>",id:"allguessescorrect",level:5},{value:"<code>updateTimer(server, room, gameDataMap)</code>",id:"updatetimerserver-room-gamedatamap",level:5},{value:"Game Constants",id:"game-constants",level:2},{value:"Prompts",id:"prompts",level:3},{value:"Game Settings",id:"game-settings",level:3},{value:"Game Flow",id:"game-flow",level:2},{value:"Server Initialization (server.js)",id:"server-initialization-serverjs",level:2}];function o(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"scribblers-backend-documentation",children:"Scribblers Backend Documentation"})}),"\n",(0,i.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(r.p,{children:"This document covers the backend server architecture and functionality."}),"\n",(0,i.jsx)(r.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,i.jsx)(r.h3,{id:"main-files",children:"Main Files"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"server.js"}),": Main entry point that initializes the Express server and Socket.io connections"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"SocketServerHandler.js"}),": Manages socket server interactions and client event listeners"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"GameData.js"}),": Handles game session data and round management"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"classes",children:"Classes"}),"\n",(0,i.jsx)(r.h3,{id:"sockethandler",children:"SocketHandler"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Class: SocketHandler\r\nLocation: SocketServerHandler.js\n"})}),"\n",(0,i.jsx)(r.p,{children:"This class manages socket initialization and event listeners for client-server communication."}),"\n",(0,i.jsx)(r.h4,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(r.h5,{id:"createserverinstancehttpserver",children:(0,i.jsx)(r.code,{children:"createServerInstance(httpServer)"})}),"\n",(0,i.jsx)(r.p,{children:"Creates and configures a new Socket.io server instance."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"httpServer"})," - HTTP server created using an Express application"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Returns"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"New Socket.io server instance on success"}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"0"})," on failure"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Configuration"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"CORS: Allows connections from any origin"}),"\n",(0,i.jsx)(r.li,{children:"Methods: GET, POST"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h5,{id:"startserverhttpserver-port",children:(0,i.jsx)(r.code,{children:"startServer(httpServer, port)"})}),"\n",(0,i.jsx)(r.p,{children:"Starts the HTTP server on the specified port."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"httpServer"})," - HTTP server created using an Express application"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"port"})," - Port number to listen on"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h5,{id:"initializeserverlistenersserver-client-gamedatamap",children:(0,i.jsx)(r.code,{children:"initializeServerListeners(server, client, gameDataMap)"})}),"\n",(0,i.jsx)(r.p,{children:"Initializes Socket.io event listeners to handle client requests."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"server"})," - Socket.io server instance"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"client"})," - Socket.io client connecting to server"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"gameDataMap"})," - Server-side map of game session data"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h4,{id:"event-listeners",children:"Event Listeners"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Event"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"start-game"})}),(0,i.jsx)(r.td,{children:"Starts a new game session in the specified room"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"play-again"})}),(0,i.jsx)(r.td,{children:"Resets the game to play another round"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"create-new-lobby"})}),(0,i.jsx)(r.td,{children:"Generates a unique room code and creates a new game session"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"join-room"})}),(0,i.jsx)(r.td,{children:"Handles a player joining an existing room"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"leave-room"})}),(0,i.jsx)(r.td,{children:"Manages player disconnection and room cleanup"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"reset-scores"})}),(0,i.jsx)(r.td,{children:"Resets all player scores in a room"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"update-user-guess"})}),(0,i.jsx)(r.td,{children:"Updates a player's guess and checks if all players guessed correctly"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"draw-init"})}),(0,i.jsx)(r.td,{children:"Initializes drawing parameters for all clients"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"draw"})}),(0,i.jsx)(r.td,{children:"Broadcasts draw coordinates to all clients"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"draw-end"})}),(0,i.jsx)(r.td,{children:"Signals the end of a drawing action"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"draw-clear"})}),(0,i.jsx)(r.td,{children:"Clears the canvas for all clients"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"draw-undo"})}),(0,i.jsx)(r.td,{children:"Undoes the last drawing action"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"disconnect"})}),(0,i.jsx)(r.td,{children:"Handles client disconnection"})]})]})]}),"\n",(0,i.jsx)(r.h3,{id:"gamedata",children:"GameData"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{children:"Class: GameData\r\nLocation: GameData.js\n"})}),"\n",(0,i.jsx)(r.p,{children:"This class manages game session data and round mechanics."}),"\n",(0,i.jsx)(r.h4,{id:"properties",children:"Properties"}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Property"}),(0,i.jsx)(r.th,{children:"Type"}),(0,i.jsx)(r.th,{children:"Description"})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"numberRounds"})}),(0,i.jsx)(r.td,{children:"number"}),(0,i.jsx)(r.td,{children:"Total number of rounds configured for the game"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"currentRound"})}),(0,i.jsx)(r.td,{children:"number"}),(0,i.jsx)(r.td,{children:"Current round number"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"maxPlayers"})}),(0,i.jsx)(r.td,{children:"number"}),(0,i.jsx)(r.td,{children:"Maximum number of players allowed"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"players"})}),(0,i.jsx)(r.td,{children:"array"}),(0,i.jsx)(r.td,{children:"Array of player avatars in the game"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"prompt"})}),(0,i.jsx)(r.td,{children:"object"}),(0,i.jsx)(r.td,{children:"Current drawing prompt"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"drawer"})}),(0,i.jsx)(r.td,{children:"string"}),(0,i.jsx)(r.td,{children:"Current player assigned to draw"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"timerID"})}),(0,i.jsx)(r.td,{children:"number"}),(0,i.jsx)(r.td,{children:"Timer interval ID"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"timerValue"})}),(0,i.jsx)(r.td,{children:"number"}),(0,i.jsx)(r.td,{children:"Current time remaining in seconds"})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"playerData"})}),(0,i.jsx)(r.td,{children:"Map"}),(0,i.jsx)(r.td,{children:"Player-specific data (scores, guesses)"})]})]})]}),"\n",(0,i.jsx)(r.h4,{id:"methods-1",children:"Methods"}),"\n",(0,i.jsx)(r.h5,{id:"constructornumberrounds-currentround-maxplayers-players-prompt-drawer-timerid-timervalue-playerdata",children:(0,i.jsx)(r.code,{children:"constructor(numberRounds, currentRound, maxPlayers, players, prompt, drawer, timerID, timerValue, playerData)"})}),"\n",(0,i.jsx)(r.p,{children:"Creates a new game session with specified parameters."}),"\n",(0,i.jsx)(r.h5,{id:"startnewroundserver-room-gamedatamap",children:(0,i.jsx)(r.code,{children:"startNewRound(server, room, gameDataMap)"})}),"\n",(0,i.jsx)(r.p,{children:"Begins a new round in the specified room."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"server"})," - Socket.io server instance"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"room"})," - Room identifier"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"gameDataMap"})," - Server-side map of game session data"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Process"}),":","\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Clears previous guesses"}),"\n",(0,i.jsx)(r.li,{children:"Increments round number"}),"\n",(0,i.jsx)(r.li,{children:"Checks if game should end"}),"\n",(0,i.jsx)(r.li,{children:"Selects a new drawer"}),"\n",(0,i.jsx)(r.li,{children:"Generates new prompt"}),"\n",(0,i.jsx)(r.li,{children:"Starts round timer"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h5,{id:"getpromptobject",children:(0,i.jsx)(r.code,{children:"getPromptObject()"})}),"\n",(0,i.jsx)(r.p,{children:"Randomly selects a drawing prompt, avoiding previously used prompts."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Returns"}),": A prompt object containing word and type"]}),"\n"]}),"\n",(0,i.jsx)(r.h5,{id:"getpathpromptobject",children:(0,i.jsx)(r.code,{children:"getPath(promptObject)"})}),"\n",(0,i.jsx)(r.p,{children:"Forms the file path for the prompt image."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"promptObject"})," - The selected prompt object"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Returns"}),": Path to the prompt image"]}),"\n"]}),"\n",(0,i.jsx)(r.h5,{id:"clearguessesserver-room",children:(0,i.jsx)(r.code,{children:"clearGuesses(server, room)"})}),"\n",(0,i.jsx)(r.p,{children:"Clears all player guesses and updates clients."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"server"})," - Socket.io server instance"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"room"})," - Room identifier"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h5,{id:"allguessescorrect",children:(0,i.jsx)(r.code,{children:"allGuessesCorrect()"})}),"\n",(0,i.jsx)(r.p,{children:"Checks if all players have guessed correctly."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Returns"}),": ",(0,i.jsx)(r.code,{children:"true"})," if all non-drawing players guessed correctly, ",(0,i.jsx)(r.code,{children:"false"})," otherwise"]}),"\n"]}),"\n",(0,i.jsx)(r.h5,{id:"updatetimerserver-room-gamedatamap",children:(0,i.jsx)(r.code,{children:"updateTimer(server, room, gameDataMap)"})}),"\n",(0,i.jsx)(r.p,{children:"Updates the round timer and handles timer expiration."}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Parameters"}),":","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"server"})," - Socket.io server instance"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"room"})," - Room identifier"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.code,{children:"gameDataMap"})," - Server-side map of game session data"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"game-constants",children:"Game Constants"}),"\n",(0,i.jsx)(r.h3,{id:"prompts",children:"Prompts"}),"\n",(0,i.jsx)(r.p,{children:"The game includes drawing prompts organized by categories:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Actions: Eat, Jump, Run, Sleep"}),"\n",(0,i.jsx)(r.li,{children:"Animals: Bird, Cat, Dog, Elephant, Horse, Mouse"}),"\n",(0,i.jsx)(r.li,{children:"Clothing: Glasses, Glove, Hat, Pants, Shirt, Shoe"}),"\n",(0,i.jsx)(r.li,{children:"Food: Apple, Banana, Carrot, Grapes, Pizza, Spaghetti"}),"\n",(0,i.jsx)(r.li,{children:"Shapes: Circle, Oval, Square, Triangle"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"game-settings",children:"Game Settings"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Round duration: 60 seconds"}),"\n",(0,i.jsx)(r.li,{children:"Images per prompt: 3"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"game-flow",children:"Game Flow"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Players create or join a room using a unique code"}),"\n",(0,i.jsx)(r.li,{children:"Host starts the game"}),"\n",(0,i.jsxs)(r.li,{children:["For each round:","\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"A random player is selected as the drawer"}),"\n",(0,i.jsx)(r.li,{children:"A random prompt is assigned"}),"\n",(0,i.jsx)(r.li,{children:"The drawer draws the prompt"}),"\n",(0,i.jsx)(r.li,{children:"Other players attempt to guess the word"}),"\n",(0,i.jsx)(r.li,{children:"Round ends when time expires or all players guess correctly"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.li,{children:"Game ends after the configured number of rounds"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"server-initialization-serverjs",children:"Server Initialization (server.js)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"/**\r\n * This file it the main executable for the Scribblers backend. Node, Express, and Socket.io \r\n * are used to listen for requests and send/receive game data.\r\n */\r\n//  IMPORTING\r\nconst express = require('express'); // Creates backend server\r\nconst http = require('http'); // Creates HTTP server\r\nconst SocketServerHandler = require(\"./objects/SocketServerHandler.js\"); // Manages socket server interactions\r\n\r\n//  INITIALIZATIONS\r\nconst app = express(); // Express initialization\r\nconst server = http.createServer(app); // Create HTTP server using Express\r\nconst mappedGameData = new Map(); // Create global map to manage game data objects\r\nconst SocketServer = new SocketServerHandler(); // Create socket manager\r\nconst io = SocketServer.createServerInstance(server); // Create Socket.io server instance\r\n\r\n// Event listener for new socket connections\r\nio.on('connection', (socket) => {\r\n    SocketServer.initializeServerListeners(io, socket, mappedGameData);\r\n});\r\n\r\nSocketServer.startServer(server, 3001);\n"})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>c});var s=n(96540);const i={},t=s.createContext(i);function d(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);