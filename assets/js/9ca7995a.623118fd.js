"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[2987],{69879:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"testing/integration-testing","title":"Scribblers Integration Tests","description":"Overview","source":"@site/docs/testing/integration-testing.md","sourceDirName":"testing","slug":"/testing/integration-testing","permalink":"/project-aac-game-team-a/docs/testing/integration-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Spring/project-aac-game-team-a/tree/main/documentation/docs/testing/integration-testing.md","tags":[],"version":"current","lastUpdatedBy":"kenfonseca","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Unit tests","permalink":"/project-aac-game-team-a/docs/testing/unit-testing"},"next":{"title":"Acceptance test","permalink":"/project-aac-game-team-a/docs/testing/acceptence-testing"}}');var r=t(74848),a=t(28453);const i={sidebar_position:2},o="Scribblers Integration Tests",c={},d=[{value:"Overview",id:"overview",level:2},{value:"1. Host Creates a Lobby and Receives a Room Code",id:"1-host-creates-a-lobby-and-receives-a-room-code",level:2},{value:"Description",id:"description",level:3},{value:"2. Players Enter Room Code and Join Lobby",id:"2-players-enter-room-code-and-join-lobby",level:2},{value:"Description",id:"description-1",level:3},{value:"3. Players Select an Avatar",id:"3-players-select-an-avatar",level:2},{value:"Description",id:"description-2",level:3},{value:"4. Host Starts the Game and Players Navigate to Their Roles",id:"4-host-starts-the-game-and-players-navigate-to-their-roles",level:2},{value:"Description",id:"description-3",level:3},{value:"5. Phase Ends Correctly",id:"5-phase-ends-correctly",level:2},{value:"Description",id:"description-4",level:3},{value:"6. Drawer Selects a Prompt and Starts Drawing",id:"6-drawer-selects-a-prompt-and-starts-drawing",level:2},{value:"Description",id:"description-5",level:3},{value:"7. Guessers See Drawing Progress and Submit Guesses",id:"7-guessers-see-drawing-progress-and-submit-guesses",level:2},{value:"Description",id:"description-6",level:3},{value:"8. Players Are Awarded Points Correctly",id:"8-players-are-awarded-points-correctly",level:2},{value:"Description",id:"description-7",level:3},{value:"9. Game Ends and Users See the Summary Screen",id:"9-game-ends-and-users-see-the-summary-screen",level:2},{value:"Description",id:"description-8",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"scribblers-integration-tests",children:"Scribblers Integration Tests"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This document describes the integration tests for the Scribblers game, ensuring that essential gameplay mechanics function correctly. Each test includes a brief description and the corresponding test code."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"1-host-creates-a-lobby-and-receives-a-room-code",children:"1. Host Creates a Lobby and Receives a Room Code"}),"\n",(0,r.jsx)(n.h3,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"This test checks whether the host can create a game lobby and receive a valid room code from the server."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Host creates a lobby and receives a room code', async () => {\n    const wrapper = mount(LandingPage);\n    await wrapper.find('button#host-game').trigger('click');\n    \n    socket.on('roomCreated', (roomCode) => {\n        expect(roomCode).toMatch(/[A-Z0-9]{6}/);\n    });\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"2-players-enter-room-code-and-join-lobby",children:"2. Players Enter Room Code and Join Lobby"}),"\n",(0,r.jsx)(n.h3,{id:"description-1",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Ensures that players can enter a valid room code and successfully join the lobby."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Players enter room code and join lobby', async () => {\n    const wrapper = mount(LandingPage);\n    \n    await wrapper.find('input#room-code').setValue('ABC123');\n    await wrapper.find('button#join-game').trigger('click');\n    \n    socket.on('roomJoined', (success) => {\n        expect(success).toBe(true);\n    });\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"3-players-select-an-avatar",children:"3. Players Select an Avatar"}),"\n",(0,r.jsx)(n.h3,{id:"description-2",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Tests whether players can select an avatar before joining the game."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Players select an avatar', async () => {\n    const wrapper = mount(LandingPage);\n    \n    socket.emit('avatarChoices', ['Avatar1', 'Avatar2', 'Avatar3']);\n    await wrapper.find('button#select-avatar-0').trigger('click');\n    \n    socket.on('avatarSelected', (selectedAvatar) => {\n        expect(['Avatar1', 'Avatar2', 'Avatar3']).toContain(selectedAvatar);\n    });\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"4-host-starts-the-game-and-players-navigate-to-their-roles",children:"4. Host Starts the Game and Players Navigate to Their Roles"}),"\n",(0,r.jsx)(n.h3,{id:"description-3",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Validates that the host can start the game and players receive their roles (drawer or guesser)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Host starts the game and players navigate to drawing/guessing pages', async () => {\n    const wrapper = mount(LobbyPage);\n    await wrapper.find('button#start-game').trigger('click');\n    \n    socket.on('gameStarted', (role) => {\n        expect(['drawer', 'guesser']).toContain(role);\n    });\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"5-phase-ends-correctly",children:"5. Phase Ends Correctly"}),"\n",(0,r.jsx)(n.h3,{id:"description-4",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Ensures that the game phase ends when the timer expires or when all players guess correctly."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Phase ends when timer expires or all guesses are correct', async () => {\n    const wrapper = mount(GuessingPage);\n    \n    socket.emit('phaseEnd', { reason: 'timerExpired' });\n    await new Promise(resolve => setTimeout(resolve, 500));\n    expect(wrapper.text()).toContain('Round Over');\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"6-drawer-selects-a-prompt-and-starts-drawing",children:"6. Drawer Selects a Prompt and Starts Drawing"}),"\n",(0,r.jsx)(n.h3,{id:"description-5",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Tests whether the drawer can select a prompt and begin drawing."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Drawer selects a prompt and starts drawing', async () => {\n    const wrapper = mount(DrawingPage);\n    \n    socket.emit('promptChoices', ['Cat', 'Tree', 'Car']);\n    await wrapper.find('button#select-prompt-0').trigger('click');\n    \n    socket.on('promptSelected', (selectedPrompt) => {\n        expect(['Cat', 'Tree', 'Car']).toContain(selectedPrompt);\n    });\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"7-guessers-see-drawing-progress-and-submit-guesses",children:"7. Guessers See Drawing Progress and Submit Guesses"}),"\n",(0,r.jsx)(n.h3,{id:"description-6",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Ensures that guessers can see the drawing progress and submit guesses."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Guessers see drawing progress and can submit guesses', async () => {\n    const wrapper = mount(GuessingPage);\n    \n    socket.emit('drawingData', { lines: [{ x: 10, y: 20 }] });\n    await wrapper.find('input#guess-input').setValue('Cat');\n    await wrapper.find('button#submit-guess').trigger('click');\n    \n    socket.on('guessResponse', (correct) => {\n        expect(typeof correct).toBe('boolean');\n    });\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"8-players-are-awarded-points-correctly",children:"8. Players Are Awarded Points Correctly"}),"\n",(0,r.jsx)(n.h3,{id:"description-7",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Validates that players who guess correctly and the drawer are awarded the correct points."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Players are awarded points correctly', async () => {\n    socket.emit('correctGuess', { player: 'Alice', points: 10 });\n    \n    socket.on('updateScore', ({ player, points }) => {\n        expect(player).toBe('Alice');\n        expect(points).toBe(10);\n    });\n});\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"9-game-ends-and-users-see-the-summary-screen",children:"9. Game Ends and Users See the Summary Screen"}),"\n",(0,r.jsx)(n.h3,{id:"description-8",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"Checks that when the game ends, players see the summary screen with final rankings."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"test('Game ends and users see the summary screen', async () => {\n    const wrapper = mount(SummaryPage);\n    \n    socket.emit('gameOver', { rankings: [{ player: 'Alice', score: 10 }] });\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    expect(wrapper.text()).toContain('Alice');\n});\n"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);