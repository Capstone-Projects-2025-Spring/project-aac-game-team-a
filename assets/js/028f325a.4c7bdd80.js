"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[5450],{79199:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api-specification/frontend","title":"Frontend-Backend Integration Documentation","description":"Overview","source":"@site/docs/api-specification/frontend.md","sourceDirName":"api-specification","slug":"/api-specification/frontend","permalink":"/project-aac-game-team-a/docs/api-specification/frontend","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Spring/project-aac-game-team-a/tree/main/documentation/docs/api-specification/frontend.md","tags":[],"version":"current","lastUpdatedBy":"kenfonseca","frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Backend JSDoc Documentation","permalink":"/project-aac-game-team-a/docs/api-specification/backendJSDoc"},"next":{"title":"Frontend JSDoc Documentation","permalink":"/project-aac-game-team-a/docs/api-specification/frontendJSDoc"}}');var r=t(74848),i=t(28453);const o={},c="Frontend-Backend Integration Documentation",l={},d=[{value:"Overview",id:"overview",level:2},{value:"WebSocket Communication",id:"websocket-communication",level:2},{value:"Socket Connection",id:"socket-connection",level:3},{value:"Socket Client Handler",id:"socket-client-handler",level:3},{value:"Socket Events",id:"socket-events",level:2},{value:"Outgoing Events (Client to Server)",id:"outgoing-events-client-to-server",level:3},{value:"Incoming Events (Server to Client)",id:"incoming-events-server-to-client",level:3},{value:"Game State Management",id:"game-state-management",level:2},{value:"GameState Store",id:"gamestate-store",level:3},{value:"SettingState Store",id:"settingstate-store",level:3},{value:"Game Flow",id:"game-flow",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Accessibility Features",id:"accessibility-features",level:2},{value:"Development Environment Configuration",id:"development-environment-configuration",level:2},{value:"Recommendations for Implementation",id:"recommendations-for-implementation",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"frontend-backend-integration-documentation",children:"Frontend-Backend Integration Documentation"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"This documentation provides a comprehensive guide to the frontend-backend integration for the Scribblers game application. The system uses WebSockets for real-time communication between the client and server, enabling features like live drawing, game state synchronization, and player interaction."}),"\n",(0,r.jsx)(n.h2,{id:"websocket-communication",children:"WebSocket Communication"}),"\n",(0,r.jsx)(n.h3,{id:"socket-connection",children:"Socket Connection"}),"\n",(0,r.jsx)(n.p,{children:"The game client establishes a WebSocket connection to the server when the game component is mounted:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"mounted() {\r\n    this.socketInstance = SocketHandler.connectSocketServer(socketServer, testServer, inProduction, this)\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"The connection parameters include:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"socketServer"}),': The production server address ("scribblersserver.fly.dev")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"testServer"}),': The local development server address ("localhost")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"inProduction"}),": Boolean flag to determine which server to connect to"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"socket-client-handler",children:"Socket Client Handler"}),"\n",(0,r.jsxs)(n.p,{children:["The application uses a ",(0,r.jsx)(n.code,{children:"SocketClientHandler"})," class to manage WebSocket connections:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'import SocketClientHandler from "../objects/SocketClientHandler.js";\r\nconst SocketHandler = new SocketClientHandler;\r\n\n'})}),"\n",(0,r.jsx)(n.p,{children:"This handler likely contains methods for establishing connections, registering event listeners, and managing the WebSocket lifecycle."}),"\n",(0,r.jsx)(n.h2,{id:"socket-events",children:"Socket Events"}),"\n",(0,r.jsx)(n.h3,{id:"outgoing-events-client-to-server",children:"Outgoing Events (Client to Server)"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Name"}),(0,r.jsx)(n.th,{children:"Parameters"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"leave-room"}),(0,r.jsx)(n.td,{children:"roomCode, username"}),(0,r.jsx)(n.td,{children:"Notifies server when a player leaves the room"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"update-user-guess"}),(0,r.jsx)(n.td,{children:"roomCode, username, guess, imagePath, score"}),(0,r.jsx)(n.td,{children:"Sends player's guess to the server"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"draw-init"}),(0,r.jsx)(n.td,{children:"roomCode, x, y, drawColor, drawWidth"}),(0,r.jsx)(n.td,{children:"Initializes drawing action"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"draw"}),(0,r.jsx)(n.td,{children:"roomCode, x, y"}),(0,r.jsx)(n.td,{children:"Sends ongoing drawing coordinates"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"draw-end"}),(0,r.jsx)(n.td,{children:"roomCode"}),(0,r.jsx)(n.td,{children:"Signals end of drawing stroke"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"draw-clear"}),(0,r.jsx)(n.td,{children:"roomCode"}),(0,r.jsx)(n.td,{children:"Requests to clear the canvas"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"draw-undo"}),(0,r.jsx)(n.td,{children:"roomCode"}),(0,r.jsx)(n.td,{children:"Requests to undo the last drawing action"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"timer-start"}),(0,r.jsx)(n.td,{children:"roomCode, length"}),(0,r.jsx)(n.td,{children:"Requests to start the game timer"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"start-game"}),(0,r.jsx)(n.td,{children:"roomCode"}),(0,r.jsx)(n.td,{children:"Initiates the game session"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"reset-scores"}),(0,r.jsx)(n.td,{children:"roomCode"}),(0,r.jsx)(n.td,{children:"Resets all player scores"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"play-again"}),(0,r.jsx)(n.td,{children:"roomCode"}),(0,r.jsx)(n.td,{children:"Requests to restart the game"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"incoming-events-server-to-client",children:"Incoming Events (Server to Client)"}),"\n",(0,r.jsx)(n.p,{children:"While the events aren't explicitly defined in the provided code, based on the client implementation, we can infer the following server events:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Event Name"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"connect"}),(0,r.jsx)(n.td,{children:"Confirms successful connection to the server"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"disconnect"}),(0,r.jsx)(n.td,{children:"Signals disconnection from the server"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"room-update"}),(0,r.jsx)(n.td,{children:"Updates player list and room status"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"game-start"}),(0,r.jsx)(n.td,{children:"Notifies clients that the game has started"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"game-end"}),(0,r.jsx)(n.td,{children:"Notifies clients that the game has ended"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"round-start"}),(0,r.jsx)(n.td,{children:"Signals the start of a new round"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"round-end"}),(0,r.jsx)(n.td,{children:"Signals the end of a round"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"draw-data"}),(0,r.jsx)(n.td,{children:"Receives drawing data from the server"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"timer-update"}),(0,r.jsx)(n.td,{children:"Updates the remaining time in the round"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"guess-update"}),(0,r.jsx)(n.td,{children:"Updates player guess information"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"prompt-update"}),(0,r.jsx)(n.td,{children:"Provides the drawing prompt to the drawer"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"game-state-management",children:"Game State Management"}),"\n",(0,r.jsx)(n.p,{children:"The application uses a state management pattern to track game information:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { GameState } from '@/stores/GameState';\r\nimport { SettingState } from '@/stores/SettingState';\r\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"gamestate-store",children:"GameState Store"}),"\n",(0,r.jsx)(n.p,{children:"Stores game-related information:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"currentUser"}),": Current player's username"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"currentUserAvatar"}),": Current player's avatar image"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"roomCode"}),": Room identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isHost"}),": Whether the current user is the host"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"maxPlayers"}),": Maximum number of players allowed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"rounds"}),": Number of game rounds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"isHostPlaying"}),": Whether the host is also playing"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"settingstate-store",children:"SettingState Store"}),"\n",(0,r.jsx)(n.p,{children:"Manages application settings:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"enableTTS"}),": Toggle for text-to-speech functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"volumeTTS"}),": Volume level for text-to-speech"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"showSettings"}),": Controls visibility of settings overlay"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"game-flow",children:"Game Flow"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Room Creation/Joining"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Host creates a room with settings for max players and rounds"}),"\n",(0,r.jsx)(n.li,{children:"Players join using the room code (represented as shapes)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Waiting Room"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Players see who has joined"}),"\n",(0,r.jsx)(n.li,{children:"Host can start the game once ready"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Game Play"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Random player is selected as drawer"}),"\n",(0,r.jsx)(n.li,{children:"Drawer receives a prompt word and reference image"}),"\n",(0,r.jsx)(n.li,{children:"Other players guess using AAC board"}),"\n",(0,r.jsx)(n.li,{children:"Round timer counts down"}),"\n",(0,r.jsx)(n.li,{children:"Players receive points based on correct guesses and timing"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Round Transition"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Round ends when time runs out or all players guess correctly"}),"\n",(0,r.jsx)(n.li,{children:"New drawer is selected for next round"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Game End"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"After all rounds complete, end screen shows results"}),"\n",(0,r.jsx)(n.li,{children:"Players can choose to play again or leave"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"The application includes error handling for WebSocket disconnections:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'serverDisconnect() {\r\n    try {\r\n        this.playerCount = 0;\r\n        this.speakNow(\'Quitting game\')\r\n        if (this.socketInstance && this.socketInstance.connected) {\r\n            this.socketInstance.emit("leave-room", this.roomCodeStr, GameState().currentUser);\r\n            this.socketInstance.disconnect();\r\n            console.log("Disconnected from server.");\r\n        } else {\r\n            console.warn("Socket is not connected or already null.");\r\n        }\r\n    } catch (error) {\r\n        console.error("Error during disconnection:", error.message || error);\r\n    }\r\n}\r\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"accessibility-features",children:"Accessibility Features"}),"\n",(0,r.jsx)(n.p,{children:"The application includes text-to-speech functionality for accessibility:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"speakNow(textToSpeak) {\r\n    speechSynthesis.cancel();\r\n    if(this.settingsState.enableTTS && !textToSpeak.includes('null')){\r\n        const utterance = new SpeechSynthesisUtterance(textToSpeak);\r\n        utterance.volume = this.settingsState.volumeTTS\r\n        utterance.lang = 'en';\r\n        speechSynthesis.speak(utterance);\r\n    }\r\n}\r\n\n"})}),"\n",(0,r.jsx)(n.h2,{id:"development-environment-configuration",children:"Development Environment Configuration"}),"\n",(0,r.jsx)(n.p,{children:"The application includes configuration for switching between development and production environments:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:'const inProduction = false; //change this variable to switch between connecting to public backend server and localhost\r\nconst socketServer = "scribblersserver.fly.dev"; //web address for hosted websocket server\r\nconst testServer = "localhost" //set to IP address of test server\r\n\n'})}),"\n",(0,r.jsx)(n.h2,{id:"recommendations-for-implementation",children:"Recommendations for Implementation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Server-Side Implementation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement matching socket event handlers on the server side"}),"\n",(0,r.jsx)(n.li,{children:"Add validation for all incoming socket events"}),"\n",(0,r.jsx)(n.li,{children:"Implement room management with unique codes"}),"\n",(0,r.jsx)(n.li,{children:"Track player connections and handle disconnections gracefully"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Authentication & Authorization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Consider adding simple authentication for persistent user identities"}),"\n",(0,r.jsx)(n.li,{children:"Implement room ownership validation for host-only actions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Data Persistence"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Consider storing game history and user statistics"}),"\n",(0,r.jsx)(n.li,{children:"Implement leaderboards for competitive play"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance Optimization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Optimize drawing data transmission for bandwidth efficiency"}),"\n",(0,r.jsx)(n.li,{children:"Implement throttling for rapid drawing actions"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Testing"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create test cases for socket communication"}),"\n",(0,r.jsx)(n.li,{children:"Test disconnection and reconnection scenarios"}),"\n",(0,r.jsx)(n.li,{children:"Verify game state synchronization across multiple clients"}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);