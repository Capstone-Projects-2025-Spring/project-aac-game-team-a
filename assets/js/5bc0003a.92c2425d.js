"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[635],{19950:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"requirements/system-block-diagram","title":"System Block Diagram","description":"System Block Diagram","source":"@site/docs/requirements/system-block-diagram.md","sourceDirName":"requirements","slug":"/requirements/system-block-diagram","permalink":"/project-aac-game-team-a/docs/requirements/system-block-diagram","draft":false,"unlisted":false,"editUrl":"https://github.com/Capstone-Projects-2025-Spring/project-aac-game-team-a/tree/main/documentation/docs/requirements/system-block-diagram.md","tags":[],"version":"current","lastUpdatedBy":"Terrell Heyward","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"System Overview","permalink":"/project-aac-game-team-a/docs/requirements/system-overview"},"next":{"title":"General Requirements","permalink":"/project-aac-game-team-a/docs/requirements/general-requirements"}}');var r=t(74848),i=t(28453);const a={sidebar_position:2},o="System Block Diagram",c={},d=[{value:"Description",id:"description",level:2},{value:"Front-End:",id:"front-end",level:4},{value:"Back-End:",id:"back-end",level:4},{value:"Hosting:",id:"hosting",level:4}];function l(e){const n={h1:"h1",h2:"h2",h4:"h4",header:"header",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"system-block-diagram",children:"System Block Diagram"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://capstone-projects-2025-spring.github.io/project-aac-game-team-a/img/system-block-diagram.png",alt:"System Block Diagram"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Figure 1."})," High-level design of Scribblers! web application."]}),"\n",(0,r.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,r.jsx)(n.p,{children:"The Scribblers! project stack is composed as followed:"}),"\n",(0,r.jsx)(n.h4,{id:"front-end",children:"Front-End:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Vue.js"}),"\n",(0,r.jsx)(n.li,{children:"Socket.io (Client)"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"back-end",children:"Back-End:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Node.js"}),"\n",(0,r.jsx)(n.li,{children:"Express"}),"\n",(0,r.jsx)(n.li,{children:"Socket.io (Server)"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"hosting",children:"Hosting:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fly.io"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"AAC and Non-AAC Users access the game through the same webpage interface. The front-end handles visual rendering, user input for all features, and updating the webpage with game data processed by the back-end. The back-end processes any data sent by the front-end, handles game data functions such as timers and round starting and stopping, and updates the other users with data from the server to maintain syncronization across multiple users."})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);